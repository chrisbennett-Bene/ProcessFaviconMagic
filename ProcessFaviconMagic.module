<?php namespace ProcessWire;

/**
 * FaviconMagic
 * @author Chris Bennett
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * http://www.processwire.com
 * http://www.ryancramer.com
 */

class ProcessFaviconMagic extends Process implements Module {

    const MODULE_NAME         = 'FaviconMagic';
    const MODULE_DIR          = 'Process'.self::MODULE_NAME;
    const VERSION             = '0.1.8';
    const SUMMARY             = 'Automagic generation of files, folder and markup for your favicons, webmanifest and browserconfig. No third parties, no zip files, no hassle';
    const AUTHOR              = 'bene - Chris Bennett';
    const ICON                = 'star';
    const PAGE_NAME           = 'favicon-magic';
    
	public static function getModuleInfo() {
		return array(
			'title'       => self::MODULE_NAME,__FILE__,
			'summary'     => self::SUMMARY,
			'version'     => self::VERSION,			
            'author'      => self::AUTHOR,
			'autoload'    => 'template=admin',
			'icon'        => self::ICON,
			'requires'    => 'ProcessWire>=3.0.17',
		);
	}
	
  	public function ___install() { 
			
		parent::___install();		
        $page = $this->pages->get('name='.self::PAGE_NAME);

		if (!$page->id) {

		    // Create fieldgroup, template, fields and page
		
		    // Create new fieldgroup
            $fmFieldgroup               = new Fieldgroup();
            $fmFieldgroup->name         = self::MODULE_NAME.'-fieldgroup';
            $fmFieldgroup->add($this->fields->get('title')); // needed title field
            $fmFieldgroup->save();

            // Create new template using the fieldgroup
            $fmTemplate                   = new Template();
            $fmTemplate->name             = self::MODULE_NAME;
            $fmTemplate->fieldgroup       = $fmFieldgroup;
		    $fmTemplate->noSettings       = 1;
            $fmTemplate->noChildren       = 1;
            $fmTemplate->noParents        = 1;
            $fmTemplate->allowNewPages    = 0;
            $fmTemplate->tabContent       = self::MODULE_NAME.' Source Files';
            $fmTemplate->noChangeTemplate = 1;
			$fmTemplate->useRoles         = 1;
			$fmTemplate->guestSearchable  = 0;
		    $fmTemplate->setIcon(self::ICON);	
			
            $fmTemplate->save();
            			
			// Favicon source
            $fmField                      = new Field();
            $fmField->type                = $this->modules->get("FieldtypeImage"); 
            $fmField->name                = 'fmFavicon';
            $fmField->label               = 'Favicon';
			$fmField->focusMode           = 'off';
			$fmField->gridMode            = 1;
            $fmField->columnWidth         = 50;
            $fmField->collapsed           = Inputfield::collapsedNever;
		    $fmField->setIcon(self::ICON);
            $fmField->addTag(self::MODULE_NAME);
			$fmField->save();
			
			$fmFieldgroup->add($fmField);
			
			// Favicon Silhouette source
            $fmField                      = new Field();
            $fmField->type                = $this->modules->get("FieldtypeImage"); 
            $fmField->name                = 'fmFaviconSilhouette';
            $fmField->label               = 'SVG Silhouette';
            $fmField->focusMode           = 'off';
			$fmField->gridMode            = 1;
            $fmField->extensions          = 'svg';
            $fmField->columnWidth         = 50;
            $fmField->collapsed           = Inputfield::collapsedNever;
		    $fmField->setIcon(self::ICON);
            $fmField->addTag(self::MODULE_NAME);
            $fmField->save();

			$fmFieldgroup->add($fmField);
			
			$fmFieldgroup->save();
			
            // Create page
            $page = $this->wire( new Page() );
            $page->template = self::MODULE_NAME;
            $page->parent = $this->wire('pages')->get('/');
            $page->addStatus(Page::statusHidden);
            $page->title = 'Favicons';
            $page->name = self::PAGE_NAME;
            $page->process = $this;
            $page->save();
	   
	    }
	}	
	
	public function ___uninstall() {
	
		parent::___uninstall();	
		$page = $this->pages->get('name='.self::PAGE_NAME);
		
		if ($page->id) {
		    $page->delete();			
		}
		
		$addedTemplate = $this->templates->get(self::MODULE_NAME);
		if ($addedTemplate) {
		    $this->templates->delete($addedTemplate);
		}	
		
		$addedFieldgroup = $this->fieldgroups->get(self::MODULE_NAME.'-fieldgroup');
		
		if ($addedFieldgroup) {		
		    $this->fieldgroups->delete($addedFieldgroup);
        		
        }
		
		$addedFields = $this->wire->fields->find('tags='.self::MODULE_NAME.'');

		foreach($addedFields as $addedField) {
			
			$this->wire->fields->delete($addedField);
		
		}
	}

	public function init() {
		// Grab unsaved checkbox values, including the select/delete options, which will never be saved
		$this->addHookAfter('InputfieldCheckbox::processInput', $this, 'selectDelete');
	}
	
	public function ready() {

		$page_id = $this->input->id;                                           // Get the id of the page being edited
		
		if( $page_id == $this->pages->get(self::PAGE_NAME)->id ) {             // Load page specific hooks, styles, scripts and set config if id matches
			
		    $configSet =  $this->modules->getConfig(self::MODULE_DIR);         // Check to see if saveConfig for module has been set before loading defaults      
		   
            if (!$configSet) {                                                 // If module config has not already been set, populate with existing defaults

	            $defaultData    = $this->modules->get(self::MODULE_DIR);       // Get default config data declared in getDefaults() function of moduleConfig
	            $configDefaults = array();                                     // Create $configDefaults array 

	            foreach ($defaultData as $key => $value) {                     // Populate $configDefaults array with default values
	               $configDefaults[$key] = $value;
	            }
                
	           $this->modules->saveConfig(self::MODULE_DIR, $configDefaults);  // Save module config and populate with $configDefaults
			   
			}
			
			// before ::processInput to display and update default module config data
		    $this->pages->addHookBefore('InputfieldWrapper::processInput', $this, 'updateConfig'); 
			
			// Hat tip to @bernhard, @adrian and @kixe | https://processwire.com/talk/topic/15870-how-to-add-own-tab-in-admin-on-edit-page-via-api/
		    $this->addHookAfter("ProcessPageEdit::buildForm", $this, "addTabs");
            $this->addHookAfter("ProcessPageEdit::buildFormContent", $this, "addTabs");

			$this->addHookBefore('Inputfield::render', function(HookEvent $event) {

				$inputfield = $event->object;
				
				if ($inputfield->name) $inputfield->id = $inputfield->name;     // set id of each input the same as the name. Easier CSS targeting of specific targets				
				
				include('maxCharArray.php');                                    // set max and recommended characters in array for easy updating and less repetition
				
				if ( array_key_exists ( $inputfield->name, $maxCharInputs) ) {  // if target is in array, add all the repetitive stuff in one place
					
						$setMax = ( isset( $maxCharInputs[$inputfield->name]['maxChar']     )) ? $maxCharInputs[$inputfield->name]['maxChar']     :false;
						$setRec = ( isset( $maxCharInputs[$inputfield->name]['recommended'] )) ? $maxCharInputs[$inputfield->name]['recommended'] :false;
						
						if ($setMax) {	
							$inputfield->maxlength   = $setMax;
							$inputfield->collapsed   = Inputfield::collapsedNever;
							$inputfield->columnWidth = 50; 
							$inputfield->addClass('InputfieldTextLength');
							$inputfield->setAttribute('data-showcount', 1);
		
							$inputfield->addClass('inline', 'wrapClass');
							$placeholderTxt = $setMax .' character max. ';
						}
						if ($setRec) {
							$inputfield->setAttribute('data-recommended', $setRec);
							$placeholderTxt .= $setRec. ' or less recommended';
						}
						
						$inputfield->setAttribute('placeholder' , $placeholderTxt);	    
				}
			
				if($inputfield->hasClass('colorpicker')) {                       // set all the repetitive colorpicker stuff in one place              

					$inputfield->collapsed   = Inputfield::collapsedNever;        
					$inputfield->placeholder = '#rrggbb or #rgb';
					$inputfield->maxlength   = 7;
					$inputfield->minlength   = 7;
	
				}
					 
			});
			
			$this->addHookAfter('Inputfield::render', function(HookEvent $event) {
                $inputfield = $event->object;
               
			   if($inputfield->showIf) {                                         // set showIfs to hide at start, revealing later if visible. Less viually jarring imo 
					$inputfield->addClass('showHide InputfieldStateHidden', 'wrapClass');
				}
				
			    if($inputfield->hasClass('rangeSlider')) {                       // Add additional code to .rangeSlider
					
                    $return = $event->return;
					
					$dataType = $inputfield->getAttribute('data-type');
					$minValue = $inputfield->getAttribute('min');
					$maxValue = $inputfield->getAttribute('max');
					$min = ($minValue) ? ' min="' . $minValue . '"' : '';
					$max = ($maxValue) ? ' max="' . $maxValue . '"' : '';
			        $return .= '<input type="number" class="rangeSliderDisplay"' . $min . $max . '>';
					$return .= ($dataType) ? '<div class="rangeUnits">'. $dataType . '</div>' :'';
                    
                    $event->return = $return;                                    // Populate back return value
				}
				
            });
			
			/* Add module specific css and js */
			$this->config->styles->add ( $this->config->urls->siteModules . self::MODULE_DIR . '/' . self::MODULE_NAME . '.css');
            $this->config->scripts->add( $this->config->urls->siteModules . self::MODULE_DIR . '/' . self::MODULE_NAME . '.js' );
			
			/* Add module specific definitions */
            $faviconFolder = $this->faviconFolder;
			$relativePaths = $this->relativePaths;
		    $root          = (!$relativePaths) ? rtrim($this->pages->get('/')->httpUrl , '/') : '';	
			
			if ($faviconFolder && !empty($this->symlink)) {
                $nominatedSymlink = ltrim(rtrim($this->symlink, '/'), '/');
                $symlinkLink      = $_SERVER['DOCUMENT_ROOT'] . '/' . $nominatedSymlink . '/';
		        $symlinkActive    = ( realpath($symlinkLink) === realpath($this->config->paths->files) ) ? true : false;
		   
			} else {
			    $symlinkActive    = false;
				$nominatedSymlink = false;
			}
			if ($faviconFolder) {
                $path             = $this->config->paths->files;
		        $folderName       = ($this->folderName) ? ltrim(rtrim($this->folderName, '/'), '/') : 'favicons';	
		        $folderRelative   = ($symlinkActive) ? '/' . $nominatedSymlink . '/' : $this->config->urls->files;
			} else {
                $path             = $this->config->paths->root;
			    $folderName       = '';
				$folderRelative   = '';
			}
            $imagick              = extension_loaded('imagick') || class_exists("Imagick");

	        define("FOLDER_PATH",    $path.$folderName . '/');
		    define("FOLDER_URL",     $root.$folderRelative.$folderName . '/');
		    define("BASE_URL",       $root);
            define("SYMLINK_ACTIVE", $symlinkActive);
			define("SYMLINK_FILES",  $nominatedSymlink);
            define("IMAGICK_ON",     $imagick);
		}
	}
	
	public function updateConfig(HookEvent $event) {
		
        $input = $event->arguments(0);                                                 // Get values of arguments sent to hook to access and change.
	  
        $defaultData   = $this->modules->get(self::MODULE_DIR);                        // Get defaults from moduleConfig to populate new $updateConfig array	        
		$updatedConfig = array();                            
        foreach ($defaultData as $key => $value) $updatedConfig[$key] = $input[$key];  // Update Module Config using the default keys    
       
		$this->modules->saveConfig(self::MODULE_DIR, $updatedConfig);                  // Save updated module config  
		
    }
	
	public function addTabs(HookEvent $event) {

		$data     =  $this->modules->getConfig(self::MODULE_DIR);                      // Get updated module config

		$tabid1   = 'tab-1';
		$tabid2   = 'tab-2';
		$tabid3   = 'tab-3';
		
        $form     = $event->return;                                                   // Remove the delete tab
        $page     = $event->process->getPage();
		$fieldset = $form->find("id=ProcessPageEditDelete")->first();
		$form->remove($fieldset);
		$event->object->removeTab("ProcessPageEditDelete");
		
		
		$fmFav    = $form->get('fmFavicon');	                                      // get favicon source fields to insert stuff before/after	
		$fmFavMask= $form->get('fmFaviconSilhouette');

        if($event->method == 'buildFormContent') {
			
            $event->process->addTab( $tabid1, 'Settings &amp; Review' );              // add new tabs and their names
			$event->process->addTab( $tabid2, 'Markup' );
			$event->process->addTab( $tabid3, 'About ');
		
            return;
        }
		
        $field                = $this->modules->get('InputfieldMarkup');
		$field->value         = FM_SILHOUETTE_NOTES;
	    $field->collapsed     = Inputfield::collapsedNever;
		$field->columnWidth   = 50;
        $field->showIf        = 'showMoreInfo=1';

		$form->insertAfter($field, $fmFavMask);

        $field                = $this->modules->get('InputfieldMarkup');
		$field->value         = FM_FAVICON_SRC_NOTES;
	    $field->collapsed     = Inputfield::collapsedNever;
		$field->columnWidth   = 50;
        $field->showIf        = 'showMoreInfo=1';
		
		$form->insertAfter($field, $fmFavMask);
        
		// TAB 1: SETTINGS AND REVIEW
        $tab                  = new InputfieldWrapper();                             
        $tab->id              = $tabid1;

		$field                = $this->modules->get('InputfieldCheckbox');           // Show Advanced Settings toggle
	    $field->name          = 'showAdvanced';
	    $field->label         = 'Show Advanced Settings';
		$field->checked       = $data[$field->name];
		$field->columnWidth   = 33;
		
        $tab->add($field);

		$field                = $this->modules->get('InputfieldCheckbox');           // Show More Info toggle
	    $field->name          = 'showMoreInfo';
        $field->checked       = $data[$field->name];
	    $field->label         = 'Show \'More Info\' if available';
		$field->columnWidth   = 33;
        $field->showIf        = 'showAdvanced=1';

        $tab->add($field);
		
        $field                = $this->modules->get('InputfieldCheckbox');          // Generate New Favicons toggle
	    $field->name          = 'generateNewFavicons';
        $field->label         = 'Generate New Favicons';
        $field->icon          = self::ICON;
        $field->columnWidth   = 33;	
        $field->addClass('autoSaveOnChange');

        $tab->add($field);
        
		// MAIN INFO wrapper
        //$wrapper              = new InputfieldWrapper();                             
        //$wrapper->collapsed   = Inputfield::collapsedNever;
        //$wrapper->class       = 'hideInternalBorders';

        $field                = $this->modules->get('InputfieldText');              // Business Name
	    $field->name          = 'businessName';
	    $field->label         = 'Business Name';
        $field->icon          = 'cogs';		
        $field->value         = $data[$field->name];
		$field->showCount     = 1; // declare one explicit showCount
		
		//$wrapper->add($field);
		$tab->add($field);
		
		$field                = $this->modules->get('InputfieldText');              // Business Desc
	    $field->name          = 'businessDesc';
	    $field->label         = 'Description';
        $field->icon          = 'cogs';		
        $field->value         = $data[$field->name];
		
		//$wrapper->add($field);
		$tab->add($field);
		
		$field                = $this->modules->get('InputfieldText');              // App Short Name
	    $field->name          = 'androidAppName';
	    $field->label         = 'App Short Name';
	    $field->icon          = 'android';		
		$field->value         = $data[$field->name];
		
		//$wrapper->add($field);
		$tab->add($field); 
		
        $field                = $this->modules->get('InputfieldText');              // theme color
        $field->name          = 'themeColor';
        $field->label         = 'App Theme Color';
        $field->icon          = 'android';		
		$field->value         = $data[$field->name];
        $field->columnWidth   = 50;
		
        $field->addClass('colorpicker');
		$field->addClass('inline', 'wrapClass');
		
		//$wrapper->add($field);
		//$tab->add($wrapper);		
	    $tab->add($field);

        
		// OPTIONAL COLORS wrapper
		$wrapper              = new InputfieldWrapper();                           

		$wrapper->label       = 'Colors for Apple Touch, Safari Pinned Tab/Focus and MS Tiles';
        $wrapper->notes       = '**Please note**: Optional colors will automatically use **App Theme Color** if left blank';
        $wrapper->icon        = 'paint-brush';
        $wrapper->collapsed   = Inputfield::collapsedBlank;
        $wrapper->showIf      = 'showAdvanced=1';		
        $wrapper->class       = 'pickers optional';
		
	    $field                = $this->modules->get('InputfieldText');            // apple touch color
	    $field->name          = 'appleTouchColor';
	    $field->label         = 'Apple Touch Background Color';
		$field->icon          = 'apple';
		$field->value         = $data[$field->name];	    
        $field->description   = ProcessFaviconMagicConfig::APPLETOUCH;
        $field->columnWidth   = 33;
		
		$field->addClass('colorpicker');
		$field->addClass('optional', 'wrapClass');
		
	    $wrapper->add($field);
		
	    $field                = $this->modules->get('InputfieldText');            // Safari Pinned Tab - mac Touch Bar / Focus Color
	    $field->name          = 'safariPinnedTab';
	    $field->label         = 'Safari Pinned Tab Color';
	    $field->icon          = 'apple';		
		$field->value         = $data[$field->name];	      
        $field->description   = ProcessFaviconMagicConfig::SAFARIPINTAB;
        $field->columnWidth   = 33;
		
		$field->addClass('colorpicker');
		$field->addClass('optional', 'wrapClass');
		
	    $wrapper->add($field);
		   
	    $field                = $this->modules->get('InputfieldText');            // MS Tiles color
	    $field->name          = 'msTileColor';
	    $field->label         = 'MS Tile Color';
	    $field->icon          = 'windows';
		$field->value         = $data[$field->name];        
		$field->description   = ProcessFaviconMagicConfig::MSTILES;
        $field->columnWidth   = 33;
		
		$field->addClass('colorpicker');
		$field->addClass('optional', 'wrapClass');
		
	    $wrapper->add($field);
		
	    $tab->add($wrapper);		
        
		// FAVICON FOLDER NAME AND SYMLINK
	    $wrapper              = new InputfieldWrapper();                  
        $wrapper->collapsed   = Inputfield::collapsedNever;
        $wrapper->class       = 'hideWrapperStyling';
        $wrapper->showIf      = 'faviconFolder=1, showAdvanced=1';
		
	    $field                = $this->modules->get('InputfieldText');          // Default Favicon Folder
	    $field->name          = 'folderName';
        $field->label         = 'Favicon Folder';
        $field->icon          = 'folder';
        $field->value         = $data[$field->name];
		$field->description   = (SYMLINK_ACTIVE && SYMLINK_FILES ) ? '/' . SYMLINK_FILES . '/' : $this->config->urls->files ;
	    $field->placeholder   = 'Destination folder for favicons, webmanifest and browserconfig';
	    $field->collapsed     = Inputfield::collapsedNever;
		$field->columnWidth   = 50;
		
		$field->addClass('inline', 'wrapClass');
		
        $wrapper->add($field);
		
		$field                = $this->modules->get('InputfieldText');
	    $field->name          = 'symlink';
        $field->label         = 'Symlink to /files/';
        $field->icon          = 'link';        
		$field->value         = $data[$field->name];
	    $field->description   = str_replace('https://www.', '', BASE_URL) . '/';

	    $field->placeholder   = 'Eg: media';
		
		if (empty($this->symlink)) {
			
            $field->notes     = 'Symlink (if set) for ' . $this->config->urls->files;
			
		} else { $symlinkStatus = (SYMLINK_ACTIVE) ? 
			'<strong class="success">Valid: <span> ' . SYMLINK_FILES . '<b> &#x25ba </b>'  . $this->config->urls->files . '</span></strong>':  
			'<strong class="warning">Warning! <span>Not a valid symlink</span></strong>'; 

		    $field->entityEncodeText = false;
		    $field->notes     = $symlinkStatus;   
		}
	    $field->collapsed     = Inputfield::collapsedNever;
		$field->columnWidth   = 50;
		
		$field->addClass('inline', 'wrapClass');
		
        $wrapper->add($field);
		$tab->add($wrapper);
		
		
		// CHECKBOX OPTIONS
		$wrapper              = new InputfieldWrapper();
        $wrapper->class       = 'detailsSummary showHide InputfieldStateHidden';
		$wrapper->columnWidth = 50;

        $field                = $this->modules->get('InputfieldCheckbox');
		
	    $field->name          = 'faviconFolder';
	    $field->label         = 'Use a favicon folder instead of site root';
        $field->checked       = $data[$field->name];
	    $field->collapsed     = Inputfield::collapsedNever;
        $field->showIf        = 'showAdvanced=1';
		
        $field->addClass('autoSaveOnChange autoGenerateNew');
		
        $wrapper->add($field);
		
        $field                = $this->modules->get('InputfieldMarkup');
		$field->value         = FM_FAVICON_FOLDER_NOTES;
        $field->showIf        = 'showAdvanced=1, showMoreInfo=1';
		$wrapper->add($field);
		$tab->add($wrapper);
		
        $wrapper              = new InputfieldWrapper();
        $wrapper->class       = 'detailsSummary showHide InputfieldStateHidden';
		$wrapper->columnWidth = 50;

		$field                = $this->modules->get('InputfieldCheckbox');
	    $field->name          = 'faviconRoot';
        $field->checked       = $data[$field->name];
	    $field->label         = 'Place favicon.ico in site root';
	    $field->collapsed     = Inputfield::collapsedNever;
        $field->showIf        = 'showAdvanced=1';
        
		$field->addClass('autoSaveOnChange');
		
        $wrapper->add($field);
		
        $field                = $this->modules->get('InputfieldMarkup');
		$field->value         = FM_FAVICON_ROOT_NOTES;
        $field->showIf        = 'showAdvanced=1, showMoreInfo=1';
		$wrapper->add($field);
		$tab->add($wrapper);

		$wrapper              = new InputfieldWrapper();
        $wrapper->class       = 'detailsSummary showHide InputfieldStateHidden';
		$wrapper->columnWidth = 50;
		
		$field                = $this->modules->get('InputfieldCheckbox');
	    $field->name          = 'relativePaths';
        $field->label         = 'Use relative paths for links';
        $field->checked       = $data[$field->name];
	    $field->collapsed     = Inputfield::collapsedNever;
        $field->showIf        = 'showAdvanced=1';
        
		$field->addClass('autoSaveOnChange autoGenerateNew');
		
        $wrapper->add($field);

        $field                = $this->modules->get('InputfieldMarkup');
		$field->value         = FM_RELATIVE_ABSOLUTE_NOTES;
        $field->showIf        = 'showAdvanced=1, showMoreInfo=1';
		$wrapper->add($field);
		$tab->add($wrapper);

		$wrapper              = new InputfieldWrapper();
        $wrapper->class       = 'detailsSummary showHide InputfieldStateHidden';
		$wrapper->columnWidth = 50;
		
		$field                = $this->modules->get('InputfieldCheckbox');
	    $field->name          = 'compressPNGs';
        $field->label         = 'Compress .png and .ico with PNG-8';
	    $field->collapsed     = Inputfield::collapsedNever;

		if (IMAGICK_ON) {
            $field->checked   = $data[$field->name];			
		    $field->removeAttr('disabled', 'true');			
		} else {
		    $field->attr('disabled', 'true');
		}
		
        $field->showIf        = 'showAdvanced=1';
        $field->addClass('autoSaveOnChange autoGenerateNew');
		
        $wrapper->add($field);
		
        $field                = $this->modules->get('InputfieldMarkup');
		$field->value         = FM_PNG8_NOTES;
        $field->showIf        = 'showAdvanced=1, showMoreInfo=1';
		
		$wrapper->add($field);
		$tab->add($wrapper);
		
		
		 // MANIFEST BNAME AND EXTENSION	
        $wrapper              = new InputfieldWrapper();             
        $wrapper->collapsed   = Inputfield::collapsedNever;
        $wrapper->class       = 'hideInternalBorders';
		$wrapper->columnWidth = 50;
        $wrapper->showIf      = 'showAdvanced=1';
		
	    $field                = $this->modules->get('InputfieldText');
	    $field->name          = 'manifestName';
	    $field->label         = 'Manifest name';
        $field->value         = $data[$field->name];
	    $field->icon          = 'cog';
	    $field->placeholder   = 'Specify name of your Manifest file';
	    $field->collapsed     = Inputfield::collapsedNever;
		$field->columnWidth   = 50;
		$field->addClass('inline', 'wrapClass');
        
		$wrapper->add($field);	
		
	    $field                = $this->modules->get('InputfieldSelect');
	    $field->name          = 'manifestExtension';
	    $field->label         = 'Extension';
        $field->value         = $data[$field->name];
	    $field->icon          = 'cog';
		$field->options       = '.json
.webmanifest';
	    $field->collapsed     = Inputfield::collapsedNever;
		$field->columnWidth   = 30;
		$field->addClass('inline', 'wrapClass');
		
        $wrapper->add($field);	
	    $tab->add($wrapper);
		
		$wrapper              = new InputfieldWrapper();
        $wrapper->class       = 'hideWrapperStyling optional';
		$wrapper->columnWidth = 50;
        $wrapper->showIf      = 'showAdvanced=1';
		
        $field                = $this->modules->get('InputfieldText');
	    $field->name          = 'appleAppName';
        $field->value         = $data[$field->name];
	    $field->label         = 'Apple App Name';
	    $field->icon          = 'apple';
		$field->maxlength     = 20;
		$field->showCount     = 1;
        $field->setAttribute('data-recommended', '12');
	    $field->collapsed     = Inputfield::collapsedNever;
        $field->columnWidth   = 50;
		$field->addClass('inline', 'wrapClass');
		
		$wrapper->add($field);
	    $tab->add($wrapper);
		
		// TEST FOR IMAGICK EARLY to set appropriate fields, switch acceptable source files, provide warnings and disable invalid options

		$f = $this->modules->fields->get('fmFavicon');
		
		    if (IMAGICK_ON) {
			    $f->set('extensions', 'svg png');
			    $f->set('notes',  '');		
		    } else {
		        $f->set('extensions', 'png');
			    $f->set('notes',  'ImageMagick (imagick) is required to process svg source files and for FaviconMagic\'s more advanced options.
                                   For best results and increased functionality, please enable imagick on your server.');
		    }
        $f->save();	
		
		include('Engine/FaviconMagicPreview.php');	
		
		
        $field                = $this->modules->get('InputfieldMarkup');             // Select and Delete UNUSED favicon folders and their contents
        $field->label         = 'Select previous favicon folders to delete';
        $field->description   = 'Delete favicon folders that have been created but are no longer in use'; 
        $field->icon          = 'trash';
        $field->id            = 'canDelete';
        $field->textFormat    = Inputfield::textFormatNone;
		$field->showIf        = 'showAdvanced=1';
		
		if(empty($canDelete)) {$field->collapsed = Inputfield::collapsedHidden; } 
		//else                  {$field->collapsed = Inputfield::collapsedYesAjax;}  //loading via Ajax helps prevent button intercepting save js
		
        $table                = $this->modules->get('MarkupAdminDataTable');
        $table->setEncodeEntities(false);
		$table->entityEncodeText = false;
        $table->id            = 'canDeleteTable';
		// set header rows
        $setTableHeaders = array(
            '<label class="selectAll"><input type="checkbox" id="selectDeselect"><span>Select all</span></label>',
            'Folder Name',
            'Last Modified',
            'Folder Location',
        );

        $table->headerRow($setTableHeaders);
		
        // loop through and set individual table rows
        foreach ( $canDelete as $key => $value ) {        
            
            $availableTableRow = array(
            
                '<input type="checkbox" class="fmToggleSelect" id="'. $value .'" name="'. $value .'" value="' . $key .'">',
                '<label for="'. $value .'" class="fmSelectLabel">'. $value .'</label>',
                '<span class="hiddenSortTime">'.filemtime($key).'</span>' . date ('l, j F Y, h:ia (T)', filemtime($key)),
                $key,
            );		
        
        $table->row($availableTableRow); // render table row with variables set above

        } // ends $canDelete foreach 

        // Add in button to delete fields
		$button = $this->modules->get('InputfieldSubmit');
		$button->attr('id+name', 'deleteSelectedFolders');
		$button->value = 'Delete selected folders';
		//button->type = 'button'; auto save works with this, but hook does not
		
		$field->add($button);	
		
        $field->attr('value', $table->render());
        $tab->add($field);
		
		

		// favicon preview


		$wrapper              = new InputfieldWrapper();
        $wrapper->class       = 'hideWrapperStyling';
		$wrapper->id          = 'infoPreview';
       // $wrapper->collapsed   = Inputfield::collapsedNever;

		$field                = $this->modules->get('InputfieldMarkup'); 
		$field->label         = 'Status and Totals';
		$field->id            = 'faviconStatus';
	    $field->icon          = self::ICON;
		$field->value         = $outputResultsOverview; // generated and returned by FaviconMagicPreview.php
		$field->collapsed     = Inputfield::collapsedNever;
		$field->class         = 'statusField';
        $field->columnWidth   = 50;
		
		$wrapper->add($field);
		
		$wrap                 = new InputfieldWrapper();
		$wrap->id             = 'mobileWrapper';
        $wrap->class          = 'hideWrapperStyling';
        $wrap->columnWidth    = 50;
		
		$field                = $this->modules->get('InputfieldMarkup'); 
		$field->label         = 'Mobile Preview &#8212; MotoG4, mid-range Android';
	    $field->icon          = 'android';
		$field->value         = $outputMobilePreview; // generated and returned by FaviconMagicPreview.php
		$field->collapsed     = Inputfield::collapsedNever;
		$field->class         = 'mobileField';
		
		$wrap->add($field);

		$field                = $this->modules->get('InputfieldInteger'); 
		$field->label         = 'Zoom';
		$field->name          = 'mobilePreviewZoom';
        $field->value         = $data[$field->name];
	    $field->icon          = 'search-plus';
		$field->class         = 'rangeSlider';
		$field->addClass('sliderInline', 'wrapClass');
		$field->attr("id", "previewZoom");
		$field->attr("min", "50");
		$field->attr("max", "100");
		$field->attr("data-type", "%");
		$field->set("inputType", 'range');
		$field->collapsed     = Inputfield::collapsedNever;
		
		$wrap->add($field);
		$wrapper->add($wrap);
		$tab->add($wrapper);
        
		$field                = $this->modules->get('InputfieldMarkup'); 
		$field->label         = 'Favicon Previews';
	    $field->icon          = self::ICON;
		$field->value         = $outputFaviconMagicPreview; // generated and returned by FaviconMagicPreview.php
		$field->collapsed     = Inputfield::collapsedNever;
		
		$tab->add($field);

		$form->prepend($tab);
		
		//ends tab 1

		// Tab 2: Favicon Markup Tab
		$tab                  = new InputfieldWrapper();
        $tab->id              = $tabid2;
		
		$field                = $this->modules->get('InputfieldTextarea');
		$field->name          = 'faviconMarkup';
		$field->attr('readonly', 'readonly');
		$field->label         = 'Automagically-generated Favicon Markup';
		$field->description   = 'Copy / Paste the following php include to the document <head> of your desired template/s :
		                         **<?php include($this->config->paths->files . \'faviconMarkup/faviconMarkup.txt\') ?>** This ensures your favicon markup is always up to date.
                                 The markup displayed below is provided for reference and review. There is no need to copy and paste it unless you wish to.
								 
								 Your favicons, manifest and browserconfig will continue working properly, even if the FaviconMagic module is removed.

								 ';
		$field->notes         =  'The favicon markup displayed above is automatically generated and saved as a text file in a separate faviconMarkup directory.
		                         This ensures your favicon markup will keep working even if this module is deleted.';
		$field->class         = 'faviconMarkup';
	    $field->icon          = 'code';
		$field->value         = $headMarkup; // generated and returned by FaviconMagicPreview.php
		$field->collapsed     = Inputfield::collapsedNever;
		
		$tab->add($field);
		$form->prepend($tab);
		
		//ends tab 2
		
		// Tab 3: Info and Instructions Tab
		$tab                  = new InputfieldWrapper();
        $tab->id              = $tabid3;

        // Module Info
	    $field                = $this->modules->get('InputfieldMarkup');
	    $field->value         = ProcessFaviconMagicConfig::MODULE_INFO;	    
	    $field->label         = 'What is '.self::MODULE_NAME.'?';
	    $field->icon          = 'info-circle';
        $field->collapsed     = Inputfield::collapsedNever;
        $field->columnWidth   = 50;

        $tab->add($field);

	    // Module Instructions
	    $field                = $this->modules->get('InputfieldMarkup');
        $field->value         = ProcessFaviconMagicConfig::DIRECTIONS;
        $field->label         = 'How do I use it?';
	    $field->icon          = 'info-circle';
        $field->collapsed     = Inputfield::collapsedNever;
        $field->columnWidth   = 50;

	    $tab->add($field);
        $form->prepend($tab);
		//ends tab 3
	
    }	
    // remove dir function, courtesy of bernard if memory serves
	public function rrmdir($dir) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (filetype($dir."/".$object) == "dir") 
                        rrmdir($dir."/".$object); 
                        else unlink   ($dir."/".$object);
                    }
            }
			reset($objects);
			rmdir($dir);
        }
    }

	public function selectDelete(HookEvent $event) {
			
        if($this->input->post->deleteSelectedFolders){
		    
			$inputs = $event->arguments(0);
            // grab path to previousFolders array, and include it if it exists	   
            $previousFolderFile = $this->config->paths->files. 'faviconMarkup/previousFolders.php';
            if (file_exists($previousFolderFile)) include($previousFolderFile);

            // filter out current folder and re-confirm each potential target for deletion exists and can safely be deleted
            $canDelete = array(); 
            foreach($previousFolders as $key => $value) { 
                if (file_exists($key) && $key != FOLDER_PATH && $key != $this->config->paths->root . '/') $canDelete[$key] =  $value;
            } 	
			
			// add folders to our toDelete list if checked inputs from our $inputs are in our $canDelete array
            $toDelete = array(); 
            foreach($inputs as $key => $value ) {
                if (in_array($key, $canDelete)) $toDelete[$key] =  $value;
            }

            foreach($toDelete as $key => $value ) {
				$this->message('Deleted: '. $key);
				self::rrmdir($value);

            }
        }
	}
}